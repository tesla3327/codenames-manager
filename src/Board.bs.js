// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

function makeCard($staropt$star, $staropt$star$1, $staropt$star$2, _) {
  var word = $staropt$star ? $staropt$star[0] : "Default";
  var cardType = $staropt$star$1 ? $staropt$star$1[0] : /* Neutral */2;
  var revealed = $staropt$star$2 ? $staropt$star$2[0] : /* false */0;
  return /* record */[
          /* cardType */cardType,
          /* word */word,
          /* revealed */revealed
        ];
}

function make() {
  return Belt_Array.make(5, Belt_Array.make(5, makeCard(/* None */0, /* None */0, /* None */0, /* () */0)));
}

function make_with_words(words) {
  var getRow = function (num) {
    var __x = Belt_Array.range(Caml_int32.imul(num, 5), Caml_int32.imul(num, 5) + 4 | 0);
    return Belt_Array.map(__x, (function (index) {
                  var match = Belt_Array.get(words, index);
                  if (match) {
                    return makeCard(/* Some */[match[0]], /* None */0, /* None */0, /* () */0);
                  } else {
                    return makeCard(/* None */0, /* None */0, /* None */0, /* () */0);
                  }
                }));
  };
  var __x = Belt_Array.range(0, 4);
  return Belt_Array.map(__x, getRow);
}

var class_tables = [
  0,
  0,
  0
];

function changeCardType(_, _$1, _$2) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table(0);
    var env_init = function () {
      return CamlinternalOO.create_object_opt(0, $$class);
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], 0);
}

exports.makeCard = makeCard;
exports.make = make;
exports.make_with_words = make_with_words;
exports.changeCardType = changeCardType;
/* No side effect */
